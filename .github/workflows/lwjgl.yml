name: LWJGL Build

on:
  push:
    branches:
      - main

env:
  AWS_DEFAULT_REGION: us-east-1
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  S3_PARAMS: --cache-control "public,must-revalidate,proxy-revalidate,max-age=0"

jobs:
  linux:
    name: Linux
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        BUILD: [ x64, arm32, arm64 ]
        include:
          - BUILD: x64
            ARCH: x64
            PACKAGES: gcc
            CC: CC=gcc CXX=g++
            STRIP: strip
          - BUILD: arm32
            ARCH: arm32
            CROSS_ARCH: armhf
            PACKAGES: gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf libc6-dev-armhf-cross
            CC: PKG_CONFIG_PATH=${PKG_CONFIG_PATH}:${CMAKE_SYSROOT}/usr/lib/arm-linux-gnueabihf/pkgconfig CC=arm-linux-gnueabihf-gcc CXX=arm-linux-gnueabihf-g++
            STRIP: arm-linux-gnueabihf-strip
          - BUILD: arm64
            ARCH: arm64
            CROSS_ARCH: arm64
            PACKAGES: gcc-aarch64-linux-gnu g++-aarch64-linux-gnu libc6-dev-arm64-cross
            CC: PKG_CONFIG_PATH=${PKG_CONFIG_PATH}:${CMAKE_SYSROOT}/usr/lib/aarch64-linux-gnu/pkgconfig CC=aarch64-linux-gnu-gcc CXX=aarch64-linux-gnu-g++
            STRIP: aarch64-linux-gnu-strip
    env:
      LWJGL_ARCH: ${{matrix.ARCH}}
    steps:
      - uses: actions/checkout@master
        with:
          repository: freetype/freetype
          path: freetype
      - uses: actions/checkout@v3
        with:
          fetch-depth: 3
          path: harfbuzz
      - run: |
          sudo sed -i 's/deb http/deb [arch=amd64,i386] http/' /etc/apt/sources.list
          sudo grep "ubuntu.com/ubuntu" /etc/apt/sources.list | sudo tee /etc/apt/sources.list.d/ports.list
          sudo sed -i 's/amd64,i386/armhf,arm64/' /etc/apt/sources.list.d/ports.list
          sudo sed -i 's#http://.*/ubuntu#http://ports.ubuntu.com/ubuntu-ports#' /etc/apt/sources.list.d/ports.list
          sudo dpkg --add-architecture ${{matrix.CROSS_ARCH}}
          sudo apt-get update || true
        if: contains(matrix.ARCH, 'x64') != true
        name: Prepare cross-compilation
      - run: sudo apt-get -fyq --allow-unauthenticated --no-install-suggests --no-install-recommends install ${{matrix.PACKAGES}} -o Dpkg::Options::="--force-overwrite"
        name: Install dependencies
      - run: |
          cd freetype
          ${{matrix.CC}} cmake . -B build -DFT_DISABLE_BROTLI=ON -DFT_DISABLE_BZIP2=ON -DFT_DISABLE_HARFBUZZ=ON -DFT_DISABLE_PNG=ON -DFT_DISABLE_ZLIB=ON -DBUILD_SHARED_LIBS=true -DCMAKE_BUILD_TYPE=Release
          cd build
          cmake --build . --parallel
          ${{matrix.STRIP}} libfreetype.so
          sudo make install
        name: Build and install Openssl
      - run: |
          cd harfbuzz
          ${{matrix.CC}} cmake . -B build -DHB_HAVE_FREETYPE=true -DBUILD_SHARED_LIBS=true -DCMAKE_BUILD_TYPE=Release
          cd build
          cmake --build . --parallel
          ${{matrix.STRIP}} libharfbuzz.so
        name: Configure and build harfbuzz
      - uses: actions/upload-artifact@v3
        with:
          name: harfbuzz-linux-${{matrix.ARCH}}
          path: harfbuzz/build
  macos:
    name: macOS
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        ARCH: [x64, arm64]
        include:
          - ARCH: x64
            CMAKE_PARAMS: -DCMAKE_OSX_DEPLOYMENT_TARGET=10.9
            CMAKE_FREETYPE_PARAMS: -DCMAKE_OSX_DEPLOYMENT_TARGET=10.9 -DFT_DISABLE_BROTLI=ON -DFT_DISABLE_BZIP2=ON -DFT_DISABLE_HARFBUZZ=ON -DFT_DISABLE_PNG=ON -DFT_DISABLE_ZLIB=ON
          - ARCH: arm64
            CMAKE_PARAMS: -DCMAKE_OSX_DEPLOYMENT_TARGET=11.0 -DCMAKE_OSX_ARCHITECTURES=arm64
            CMAKE_FREETYPE_PARAMS: -DCMAKE_OSX_DEPLOYMENT_TARGET=11.0 -DCMAKE_OSX_ARCHITECTURES=arm64 -DFT_DISABLE_BROTLI=ON -DFT_DISABLE_BZIP2=ON -DFT_DISABLE_HARFBUZZ=ON -DFT_DISABLE_PNG=ON -DFT_DISABLE_ZLIB=ON
    steps:
      - uses: actions/checkout@master
        with:
          repository: freetype/freetype
          path: freetype
      - uses: actions/checkout@v3
        with:
          fetch-depth: 3
          path: harfbuzz
      - run: |
          cd freetype
          cmake . -B build ${{matrix.CMAKE_FREETYPE_PARAMS}} -DBUILD_SHARED_LIBS=true -DCMAKE_BUILD_TYPE=Release
          cd build
          cmake --build . --parallel
          strip -u -r libfreetype.dylib
          sudo make install
        name: Build and install Openssl
      - run: |
          cd harfbuzz
          cmake . -B build ${{matrix.CMAKE_PARAMS}} -DHB_HAVE_FREETYPE=true -DBUILD_SHARED_LIBS=true -DCMAKE_BUILD_TYPE=Release
          cd build
          cmake --build . --parallel
          strip -u -r libharfbuzz.dylib
        name: Configure and build harfbuzz
      - uses: actions/upload-artifact@v3
        with:
          name: harfbuzz-macos-${{matrix.ARCH}}
          path: harfbuzz/build
  windows:
    name: Windows
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        ARCH: [x86, x64, arm64]
        include:
          - ARCH: x86
            MSVC_ARCH: amd64_x86
            PLATFORM: Win32
            MESON_PARAMS:
          - ARCH: x64
            MSVC_ARCH: amd64
            PLATFORM: x64
            MESON_PARAMS:
          - ARCH: arm64
            MSVC_ARCH: amd64_arm64
            PLATFORM: ARM64
            MESON_PARAMS: --cross-file lwjgl_windows_arm64cl.cross
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{matrix.MSVC_ARCH}}
      - run: |
          python -m pip install -U pip
          pip install --upgrade meson ninja fonttools
        shell: cmd
        name: Install Dependencies
      - run: |
          meson setup ${{matrix.MESON_PARAMS}} --wrap-mode=default --buildtype=release -Dfreetype=enabled -Dgdi=enabled -Ddirectwrite=enabled --prefix=%cd%/release build
          meson compile -C build
          meson install -C build
        shell: cmd
        name: Build
      - uses: actions/upload-artifact@v3
        with:
          name: harfbuzz-windows-${{matrix.ARCH}}
          path: release
